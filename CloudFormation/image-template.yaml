AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates the infrastructure VPC required to deploy Gen AI chat agent
Parameters:
  ProjectName:
    AllowedPattern: '[A-Za-z0-9-]{1,16}'
    ConstraintDescription: >-
      Maximum of 22 alphanumeric characters. Can include hyphens (-), but not
      spaces. Must be unique within your account in an AWS Region.
    Description: Project Name used to identify your resources
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: fastchat-sm
  ECRRepoName:
    Type: String
    Default: fastchat-sm
  SourceRepo:
    Type: String
Resources:
  ECRFastchat:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepoName
  CleanupLambda:
    Type: AWS::Lambda::Function
    DependsOn: ECRFastchat
    Properties:
      Code:
        ZipFile:
          !Join
            - "\n"
            - - "import boto3"
              - "import cfnresponse"
              - "import os"
              - ""
              - "account_id = os.environ['ACCOUNT_ID']"
              - "ecr_repository_name = os.environ['ECR_REPO_NAME']"
              - ""
              - "ecr_client = boto3.client('ecr')"
              - ""
              - "DELETE = 'Delete'"
              - "response_data = {}"
              - ""
              - "def handler(event, context):"
              - "  try:"
              - "    if event['RequestType'] == DELETE:"
              - "      list_images_response = ecr_client.list_images("
              - "        registryId=account_id,"
              - "        repositoryName=ecr_repository_name"
              - "        )"
              - "      image_ids = list_images_response['imageIds']"
              - ""
              - "      if len(image_ids) == 0:"
              - "        cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              - "        return"
              - "      batch_delete_image_response = ecr_client.batch_delete_image("
              - "        registryId=account_id,"
              - "        repositoryName=ecr_repository_name,"
              - "        imageIds=image_ids"
              - "        )"
              - "      print(batch_delete_image_response)"
              - ""
              - "    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              - "  except Exception as e:"
              - "    print(e)"
              - "    cfnresponse.send(event, context, cfnresponse.FAILED, response_data)"
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          ECR_REPO_NAME: !Ref ECRRepoName
      FunctionName: !Join ['', [!Ref ProjectName, CleanupLambda]]
      Handler: "index.handler"
      Runtime: "python3.8"
      Role: !GetAtt CodeBuildPushDockerRole.Arn
      Timeout: 300
  TriggerCleanupWorkflow:
    Type: Custom::Resource
    Properties:
      ServiceToken: !GetAtt CleanupLambda.Arn
  CodeBuildPushDockerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ProjectName, CodeBuildPushDockerRole]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
         - PolicyName: !Join ['', [!Ref ProjectName, CodeBuildPushDockerPolicy]]
           PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreatelogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                  - ecr:DescribeRepositories
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:BatchDeleteImage
                  - ecr:ListImages
                  - s3:*
                  - codecommit:*
                  - lambda:*
                  - codebuild:*
                  - ssm:DescribeParameters
                  - ssm:DeleteParameters
                Resource: "*"
  CodeBuildPushDocker:
    Type: AWS::CodeBuild::Project
    DependsOn: ECRFastchat
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/standard:4.0"
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref ECRRepoName
          - Name: IMAGE_TAG
            Value: latest
        PrivilegedMode: true
      Name: !Join ['', [!Ref ProjectName, PushDockerImage]]
      ServiceRole: !GetAtt CodeBuildPushDockerRole.Arn
      Source:
        Type: GITHUB
        Location: !Ref SourceRepo
  CodeBuildPushDockerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Join
            - "\n"
            - - "import boto3"
              - "import cfnresponse"
              - "import os"
              - ""
              - "project_name = os.environ['PROJECT_NAME']"
              - ""
              - "codebuild_client = boto3.client('codebuild')"
              - ""
              - "CREATE = 'Create'"
              - "response_data = {}"
              - ""
              - "def handler(event, context):"
              - "  try:"
              - "    if event['RequestType'] == CREATE:"
              - "      build_response = codebuild_client.start_build(projectName=project_name)"
              - "      print(build_response)"
              - ""
              - "    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)"
              - "  except Exception as e:"
              - "    print(e)"
              - "    cfnresponse.send(event, context, cfnresponse.FAILED, response_data)"
      Environment:
        Variables:
          PROJECT_NAME: !Ref CodeBuildPushDocker
      FunctionName: !Join ['', [!Ref ProjectName, CodeBuildPushDockerLambda]]
      Handler: "index.handler"
      Runtime: "python3.8"
      Role: !GetAtt CodeBuildPushDockerRole.Arn
      Timeout: 300
  TriggerBuildStart:
    Type: Custom::Resource
    Properties:
      ServiceToken: !GetAtt CodeBuildPushDockerLambda.Arn

Outputs:
  CodeBuildRole:
    Value: !Ref CodeBuildPushDockerRole